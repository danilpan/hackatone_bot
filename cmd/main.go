package main

import (
	finbot "bot"
	"bot/model"
	"context"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/mehanizm/iuliia-go"
	"github.com/sethvargo/go-password/password"
	"golang.org/x/crypto/bcrypt"
	"log"
	"strconv"
	"strings"
	"time"
)

const tgbotapiKey = "6262794329:AAEi3ttuwyNueHDhS40WWrGhX5l8Xs0gAOg"

var mainMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è"),
		tgbotapi.NewKeyboardButton("üóí –ü—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
	),
)

var signUpMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üóí –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
	),
)

var courseMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è"),
		tgbotapi.NewKeyboardButton("–ú–æ–∏ –≥–æ—Å—Ç–∏"),
	),
)

var stateMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ —á–∞—Å"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø"),
	),
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
	),
)

var courseSignMap map[int]*finbot.CourseSign

func init() {
	courseSignMap = make(map[int]*finbot.CourseSign)
}

func main() {
	var (
		bot        *tgbotapi.BotAPI
		err        error
		updChannel tgbotapi.UpdatesChannel
		update     tgbotapi.Update
		updConfig  tgbotapi.UpdateConfig
		botUser    tgbotapi.User
	)
	bot, err = tgbotapi.NewBotAPI(tgbotapiKey)
	if err != nil {
		panic("bot init error: " + err.Error())
	}
	loc, err := time.LoadLocation("Asia/Almaty")
	// handle err
	time.Local = loc
	botUser, err = bot.GetMe()
	if err != nil {
		panic("bot getme error: " + err.Error())
	}

	db, dbErr := initDB(context.Background(), "user=postuser password=Aiparking_2022! dbname=postgres sslmode=disable host=195.49.212.96 port=5432")
	if dbErr != nil {
		panic("db error: " + dbErr.Error())
	}

	fmt.Printf("auth ok! bot is: %s\n", botUser.FirstName)

	updConfig.Timeout = 60
	updConfig.Limit = 1
	updConfig.Offset = 0

	updChannel, err = bot.GetUpdatesChan(updConfig)
	if err != nil {
		panic("update channel error: " + err.Error())
	}

	for {

		update = <-updChannel

		if update.Message != nil {
			//–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /start
			if update.Message.IsCommand() {
				cmdText := update.Message.Command()
				if cmdText == "start" {
					_, errCUD := CheckUserDb(*db, update.Message.Chat.ID)
					if errCUD != nil {
						if errCUD.Error() == "unf" {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. \n–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
							msg.ReplyMarkup = mainMenu
							bot.Send(msg)
							continue
						} else if errCUD.Error() == "dbe" {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. \n–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
							msg.ReplyMarkup = mainMenu
							bot.Send(msg)
							continue
						}
					}
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é")
					msg.ReplyMarkup = courseMenu
					bot.Send(msg)
				}
			} else {
				if update.Message.Text == mainMenu.Keyboard[0][0].Text {
					//–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
					msg.ReplyMarkup = mainMenu
					bot.Send(msg)

				} else if update.Message.Text == mainMenu.Keyboard[0][1].Text {
					//–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω , –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–µ–π—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
					courseSignMap[update.Message.From.ID] = new(finbot.CourseSign)
					courseSignMap[update.Message.From.ID].State = finbot.StateTel
					msgConfig := tgbotapi.NewMessage(
						update.Message.Chat.ID,
						"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ç —Ç–µ–ª—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +77771234567:")
					msgConfig.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
					bot.Send(msgConfig)

				} else if update.Message.Text == courseMenu.Keyboard[0][0].Text {

					fmt.Printf(
						"message: %s\n",
						update.Message.Text)

					userId, errCUD := CheckUserDb(*db, update.Message.Chat.ID)
					if errCUD != nil {
						msgConfig := tgbotapi.NewMessage(
							update.Message.Chat.ID,
							"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
						bot.Send(msgConfig)
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
						msg.ReplyMarkup = courseMenu
						bot.Send(msg)
						continue
					}
					buildings, errGUB := GetUserBuildings(*db, userId)
					if errGUB != nil {
						msgConfig := tgbotapi.NewMessage(
							update.Message.Chat.ID,
							"–ù–µ—Ç –¥–æ—Ç—Å—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
						bot.Send(msgConfig)
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
						msg.ReplyMarkup = courseMenu
						bot.Send(msg)
						continue
					}
					if len(buildings) < 1 {
						msgConfig := tgbotapi.NewMessage(
							update.Message.Chat.ID,
							"–ù–µ—Ç –¥–æ—Ç—Å—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
						bot.Send(msgConfig)
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
						msg.ReplyMarkup = courseMenu
						bot.Send(msg)
						continue
					}

					var buildingsButtons []tgbotapi.InlineKeyboardButton
					for _, b := range buildings {
						callback := fmt.Sprintf("building_%v", b.Id)
						buildingsButtons = append(buildingsButtons, tgbotapi.InlineKeyboardButton{
							Text:                         b.Name,
							URL:                          nil,
							CallbackData:                 &callback,
							SwitchInlineQuery:            nil,
							SwitchInlineQueryCurrentChat: nil,
							CallbackGame:                 nil,
							Pay:                          false,
						})
					}
					courseSignMap[update.Message.From.ID] = new(finbot.CourseSign)
					courseSignMap[update.Message.From.ID].State = finbot.StateTel
					buildingMenu := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(buildingsButtons...))
					msg4 := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç.")
					msg4.ReplyMarkup = buildingMenu
					if _, errS := bot.Send(msg4); errS != nil {
						fmt.Printf(errS.Error())
					}
				} else if update.Message.Text == courseMenu.Keyboard[0][1].Text {
					userId, errCUD := CheckUserDb(*db, update.Message.Chat.ID)
					if errCUD != nil {
						msgConfig := tgbotapi.NewMessage(
							update.Message.Chat.ID,
							"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
						bot.Send(msgConfig)
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
						msg.ReplyMarkup = courseMenu
						bot.Send(msg)
						continue
					}
					guests, errGUG := GetUserGuests(*db, userId)
					if errGUG != nil || guests == nil || len(guests) == 0 {
						msgConfig := tgbotapi.NewMessage(
							update.Message.Chat.ID,
							"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–æ—Å—Ç–µ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤.")
						bot.Send(msgConfig)
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
						msg.ReplyMarkup = courseMenu
						bot.Send(msg)
						continue
					}
					var guestsButtons [][]tgbotapi.InlineKeyboardButton
					for _, b := range guests {
						callback := fmt.Sprintf("numbers_%v", b.ID)
						but := []tgbotapi.InlineKeyboardButton{}

						button := tgbotapi.InlineKeyboardButton{
							Text:                         b.PlateNumber,
							URL:                          nil,
							CallbackData:                 &callback,
							SwitchInlineQuery:            nil,
							SwitchInlineQueryCurrentChat: nil,
							CallbackGame:                 nil,
							Pay:                          false,
						}
						but = append(but, button)
						guestsButtons = append(guestsButtons, but)
					}
					courseSignMap[update.Message.From.ID] = new(finbot.CourseSign)
					courseSignMap[update.Message.From.ID].State = finbot.StateTel

					buildingMenu := tgbotapi.NewInlineKeyboardMarkup(guestsButtons...)
					msg4 := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à–∏ –≥–æ—Å—Ç–∏.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
					msg4.ReplyMarkup = buildingMenu
					if _, errS := bot.Send(msg4); errS != nil {
						fmt.Printf(errS.Error())
					}
				} else if update.Message.Text == stateMenu.Keyboard[0][0].Text {
					cs, ok := courseSignMap[update.Message.From.ID]
					if ok {
						errPUGA := ProlongUserGuestAccess(*db, cs.NumberId)
						if errPUGA != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"))
							msg.ReplyMarkup = stateMenu
							cs.State = finbot.StateNumberChangeState
							bot.Send(msg)
							continue
						}
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–î–æ—Å—Ç—É–ø –ø—Ä–æ–¥–ª–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"))
						msg.ReplyMarkup = courseMenu
						cs.State = finbot.StateRegistered
						bot.Send(msg)
					}
				} else if update.Message.Text == stateMenu.Keyboard[1][0].Text {
					cs, ok := courseSignMap[update.Message.From.ID]
					if ok {
						errPUGA := DeleteUserGuestAccess(*db, cs.NumberId)
						if errPUGA != nil {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"))
							msg.ReplyMarkup = stateMenu
							cs.State = finbot.StateNumberChangeState
							bot.Send(msg)
							continue
						}
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø —É–¥–∞–ª–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"))
						msg.ReplyMarkup = courseMenu
						cs.State = finbot.StateRegistered
						bot.Send(msg)
					}
				} else if update.Message.Text == stateMenu.Keyboard[2][0].Text {
					cs, ok := courseSignMap[update.Message.From.ID]
					if ok {
						msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"))
						msg.ReplyMarkup = courseMenu
						cs.State = finbot.StateRegistered
						bot.Send(msg)
					}
				} else if update.Message.Text == signUpMenu.Keyboard[0][0].Text {
					cs, ok := courseSignMap[update.Message.From.ID]
					if ok {
						msgConfig := tgbotapi.NewMessage(
							update.Message.Chat.ID,
							"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
						cs.State = finbot.StateRegistration
						msgConfig.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
						bot.Send(msgConfig)
					}
				} else {
					cs, ok := courseSignMap[update.Message.From.ID]
					if ok {
						if cs.State == finbot.StateTel {
							//–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø—É, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
							errCN := CheckNum(update.Message.Text)
							if errCN != nil {
								msgConfig := tgbotapi.NewMessage(
									update.Message.Chat.ID,
									"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")
								bot.Send(msgConfig)
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. \n–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
								msg.ReplyMarkup = mainMenu
								bot.Send(msg)
								continue
							}
							errCND := CheckNumberDb(*db, update.Message.Text)
							if errCND != nil {
								msgConfig := tgbotapi.NewMessage(
									update.Message.Chat.ID,
									"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–µ—Ä–≤–∏—Å–∞.")
								bot.Send(msgConfig)
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
								cs.Telephone = update.Message.Text
								msg.ReplyMarkup = signUpMenu
								bot.Send(msg)
								continue
							}
							errATITU := AddTgIdToUser(*db, update.Message.Chat.ID, update.Message.Text)
							if errATITU != nil {
								msgConfig := tgbotapi.NewMessage(
									update.Message.Chat.ID,
									"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
								bot.Send(msgConfig)
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. \n–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
								msg.ReplyMarkup = mainMenu
								bot.Send(msg)
								continue
							}
							//–ú–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç –Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
							UpdateUserState(*db, update.Message.Chat.ID, 1)
							cs.State = finbot.StateRegistered
							msgConfig := tgbotapi.NewMessage(
								update.Message.Chat.ID,
								"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
							msgConfig.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
							bot.Send(msgConfig)
							msg2 := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
							msg2.ReplyMarkup = courseMenu
							bot.Send(msg2)
						} else if cs.State == finbot.StateRegistered {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
							msg.ReplyMarkup = courseMenu
							bot.Send(msg)
						} else if cs.State == finbot.StateBuilding {
							userId, errCUD := CheckUserDb(*db, update.Message.Chat.ID)
							if errCUD != nil {
								msgConfig := tgbotapi.NewMessage(
									update.Message.Chat.ID,
									"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
								bot.Send(msgConfig)
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
								msg.ReplyMarkup = courseMenu
								bot.Send(msg)
								continue
							}
							buildings, errGUB := GetUserBuildings(*db, userId)
							if errGUB != nil {
								msgConfig := tgbotapi.NewMessage(
									update.Message.Chat.ID,
									"–ù–µ—Ç –¥–æ—Ç—Å—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
								bot.Send(msgConfig)
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
								msg.ReplyMarkup = courseMenu
								bot.Send(msg)
								continue
							}
							if len(buildings) < 1 {
								msgConfig := tgbotapi.NewMessage(
									update.Message.Chat.ID,
									"–ù–µ—Ç –¥–æ—Ç—Å—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
								bot.Send(msgConfig)
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
								msg.ReplyMarkup = courseMenu
								bot.Send(msg)
								continue
							}
							var buildingMenu = tgbotapi.NewReplyKeyboard(tgbotapi.NewKeyboardButtonRow())
							for _, b := range buildings {
								var but = tgbotapi.NewKeyboardButton(fmt.Sprintf("%v", b))
								buildingMenu.Keyboard = append(buildingMenu.Keyboard, tgbotapi.NewKeyboardButtonRow(but))
							}
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç ")
							msg.ReplyMarkup = buildingMenu
							bot.Send(msg)
						} else if cs.State == finbot.StateGuestAdd {

							id, errCUD := CheckUserDb(*db, update.Message.Chat.ID)
							if errCUD != nil {
								if errCUD.Error() == "unf" {
									msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. \n–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
									msg.ReplyMarkup = mainMenu
									bot.Send(msg)
									continue
								} else if errCUD.Error() == "dbe" {
									msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. \n–ü—Ä–∏–≤—è–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
									msg.ReplyMarkup = mainMenu
									bot.Send(msg)
									continue
								}
							}
							userAccList, errGAUGAL := GetActiveUserGuestAccessList(*db, id)
							if errGAUGAL != nil {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞", errGAUGAL.Error()))
								msg.ReplyMarkup = courseMenu
								cs.State = finbot.StateBuilding
								bot.Send(msg)
								continue
							}
							if len(*userAccList) > 0 {
								for _, i := range *userAccList {
									if i.PlateNumber == update.Message.Text {
										msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Å—Ç–µ–≤–æ–º —Å–ø–∏—Å–∫–µ")
										msg.ReplyMarkup = courseMenu
										cs.State = finbot.StateBuilding
										bot.Send(msg)
									}
								}
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≥–æ—Å—Ç–µ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤")
								msg.ReplyMarkup = courseMenu
								cs.State = finbot.StateBuilding
								bot.Send(msg)
								continue
							}
							errAUGA := AddUserGuestAccess(*db, &model.WhiteList{
								PlateNumber: update.Message.Text,
								BuildingID:  cs.Building,
								UserID:      int(id),
							})
							if errAUGA != nil {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–æ—Å—Ç–µ–≤–æ–π —Å–ø–∏—Å–æ–∫", errAUGA.Error()))
								msg.ReplyMarkup = courseMenu
								cs.State = finbot.StateBuilding
								bot.Send(msg)
								continue
							}
							cs.State = finbot.StateBuilding
							msg4 := tgbotapi.NewMessage(int64(update.Message.Chat.ID), fmt.Sprintf("–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø –¥–ª—è %v –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ 1 —á–∞—Å.", update.Message.Text))
							msg4.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
							if _, errS := bot.Send(msg4); errS != nil {
								fmt.Printf(errS.Error())
							}
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
							msg.ReplyMarkup = courseMenu
							bot.Send(msg)
						} else if cs.State == finbot.StateNumberChangeState {
							msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≥–æ—Å—Ç–µ–≤—ã–º –¥–æ—Å—Ç—É–ø–æ–º %v", cs.NumberId))
							msg.ReplyMarkup = stateMenu
							bot.Send(msg)
						} else if cs.State == finbot.StateRegistration {
							if len(update.Message.Text) > 0 {
								cs.FirstName = update.Message.Text
								cs.State = finbot.StateRegistrationName
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í–∞—à–µ –∏–º—è - %v", update.Message.Text))
								msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
								bot.Send(msg)
								msgCfg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("%v, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à—É —Ñ–∞–º–∏–ª–∏—é", update.Message.Text))
								msgCfg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
								bot.Send(msgCfg)
							}
						} else if cs.State == finbot.StateRegistrationName {
							if len(update.Message.Text) > 0 {
								cs.LastName = update.Message.Text
								cs.State = finbot.StateRegistrationLastname
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í–∞—à–µ —Ñ–∞–º–∏–ª–∏—è - %v", update.Message.Text))
								msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
								bot.Send(msg)
								if len(cs.FirstName) > 0 && len(cs.LastName) > 0 && len(cs.Telephone) > 0 {
									res, errG := password.Generate(8, 2, 2, false, false)
									if errG != nil {
										//TODO add handling
										log.Fatal(errG)
									}
									username := iuliia.Wikipedia.Translate(fmt.Sprintf("%v%v", cs.FirstName, cs.LastName))
									bytes, errGFP := bcrypt.GenerateFromPassword([]byte(res), 10)
									if errGFP != nil {
										//TODO add handling
									}
									pass := string(bytes)
									_, err := RegisterUser(*db, model.UserRegistration{
										Name:     cs.FirstName,
										LastName: cs.LastName,
										Phone:    cs.Telephone,
										Username: username,
										Password: pass,
										TgId:     update.Message.Chat.ID,
									})
									if err != nil {
										//TODO add handling
										log.Fatal(err)
									}
									msgCfg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\nLogin - %v \n–ü–∞—Ä–æ–ª—å - %v", username, res))
									msgCfg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
									bot.Send(msgCfg)
									cs.State = finbot.StateRegistered
									msg2 := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é")
									msg2.ReplyMarkup = courseMenu
									bot.Send(msg2)
								}
							}
						} else if cs.State == finbot.StateRegistrationLastname {

						}

					}
					fmt.Printf("state: %+v\n", cs)

				}
			}
		} else if update.CallbackQuery != nil {
			if update.CallbackQuery.Data != "" {
				arr := strings.Split(update.CallbackQuery.Data, "_")
				if len(arr) != 2 {
					msg4 := tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç.")
					msg4.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
					if _, errS := bot.Send(msg4); errS != nil {
						fmt.Printf(errS.Error())
					}
				}
				if arr[0] == "building" {
					if arr[1] != "" {
						cs, ok := courseSignMap[update.CallbackQuery.From.ID]
						if ok {
							intVar, errAtoi := strconv.Atoi(arr[1])
							if errAtoi != nil {
								fmt.Printf("Error atoi")
							}
							cs.Building = intVar
							msg := tgbotapi.NewMessage(
								int64(update.CallbackQuery.From.ID),
								fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å –Ω–æ–º–µ—Ä –≥–æ—Å—Ç—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 001AAA01 –∏–ª–∏ A001AAA: "))
							msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
							cs.State = finbot.StateGuestAdd
							bot.Send(msg)

							continue
						}
					}
				}
				if arr[0] == "numbers" {
					if arr[1] != "" {
						cs, ok := courseSignMap[update.CallbackQuery.From.ID]
						if ok {
							intVar, errAtoi := strconv.Atoi(arr[1])
							if errAtoi != nil {
								fmt.Printf("Error atoi")
							}
							cs.NumberId = intVar
							rs, errGGBI := GetGuestById(*db, int64(intVar))
							if errGGBI != nil {
								msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("", errGGBI.Error()))
								msg.ReplyMarkup = courseMenu
								cs.State = finbot.StateRegistered
								bot.Send(msg)
								continue
							}
							msg := tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), fmt.Sprintf("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≥–æ—Å—Ç–µ–≤—ã–º –¥–æ—Å—Ç—É–ø–æ–º %v", rs.PlateNumber))
							msg.ReplyMarkup = stateMenu
							cs.State = finbot.StateNumberChangeState
							bot.Send(msg)
							continue
						}
					}
				}
			} else {
				continue
			}
		} else { //–ï—Å–ª–∏ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –∫–æ–ª–±—ç–∫–∫–≤–µ—Ä–∏
			fmt.Printf("not message: %+v\n", update)
		}
	}

	bot.StopReceivingUpdates()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ : —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func CheckNum(phone string) error {
	if len(phone) != 12 {
		return fmt.Errorf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
	} else {
		phoneArr := strings.Split(phone, "")
		if phoneArr[0] != "+" {
			return fmt.Errorf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
		} else {
			if phoneArr[1] != "7" {
				return fmt.Errorf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
			} else {
				return nil
			}
		}
	}
}
